
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company      Company?
  JobSeeker    JobSeeker?
  onboardingCompleted Boolean @default(false)
  userType UserType?
  stripeCustomerId String? 
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id String @id @default(uuid())

  name     String
  location String
  logo     String
  website  String
  xAccount String?
  about    String
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  JobPost JobPost[]
}

model JobSeeker {
  id     String @id @default(uuid())
  name   String
  about  String
  resume String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id String @id @default(uuid())

  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]

  status       JobPostStatus @default(DRAFT)
  applications Int           @default(0)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 